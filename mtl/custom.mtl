[comment encoding = UTF-8 /]
[module custom('http://com/microservice')]
[import com::microservice::acceleo::module::generator::main::util /]


[template public generateCustom(aGenerator : Generator)]



[file (getAppName(aGenerator,aGenerator.microservice.name).concat('/README.md'), false, 'UTF-8')]
# [(getAppName(aGenerator,aGenerator.microservice.name))/]

[aGenerator.microservice.description/]

## Tabla de Contenidos

* ['['/]Desarrollo[']'/](#desarrollo)
* ['['/]Integraciones[']'/](#integraciones)
[if (not aGenerator.microservice.services->isEmpty())]
  * ['['/]Servicios[']'/](#servicios)
[/if]
[if (not aGenerator.microservice.database->isEmpty())]
  * ['['/]Base de Datos[']'/](#base-de-datos)
[/if]
[if (not aGenerator.microservice.azureresources->isEmpty()) and (not aGenerator.microservice.azureresources.insight->isEmpty())]
  * ['['/]Azure Insight[']'/](#azure-insight)
[/if]
* ['['/]Trazabilidad[']'/](#trazabilidad)
* ['['/]Procesos[']'/](#procesos)
  * ['['/]Proceso 1[']'/](#p1)
  * ['['/]Proceso 2[']'/](#p2)
  * ['['/]Proceso 3[']'/](#p3)
* ['['/]Operacion[']'/](#operacion)
* ['['/]Troubleshooting[']'/](#troubleshooting)


## Integraciones

[if (not aGenerator.microservice.services->isEmpty())]
## Servicios

| Url Dev       | Url Prod      | Path  |
| ------------- |:-------------:| -----:|
[for (service : Service | aGenerator.microservice.services)]
    [for (path : ServicePath | service.paths)]
| [service.url/]| [service.url/]|  [path.path/] |
	[/for]
[/for]
[/if]

[if (not aGenerator.microservice.database->isEmpty())]
## Base de Datos

| Url Dev       | Url Prod      | 
| ------------- |:-------------:| 
[for (db : DataBase | aGenerator.microservice.database)]
| [db.url/] | [db.url/] |  
[/for]
[/if]

	
[if (not aGenerator.microservice.azureresources->isEmpty()) and (not aGenerator.microservice.azureresources.insight->isEmpty())]
## Azure Insight

| Nombre      |  Llave | 
| ------------- |:-------------:| 
[for (insight : Insight | aGenerator.microservice.azureresources.insight)]
| [insight.name/] | [insight.key/] |  
[/for]

> Datos trazabilidad:

- version = version app
- message = json object
- idProcess = id trace
- index = index 
- app = app name
- eventDate = event date (yyyy-MM-dd'T'HH:mm:ss.SS")
- typeStatusCode = type code 200|500
- type           = type info|error 


[/if]


## Procesos
Procesos del api.

| Nombre        | Descripcion   | 
| ------------- |:-------------:| 
| col 3 is      | right-aligned | 
| col 2 is      | centered      |  
| zebra stripes | are neat      |  

### Create the database
CREATE DATABASE "[(getAppName(aGenerator,aGenerator.microservice.name))/]";

### Create the user
CREATE USER "[(getAppName(aGenerator,aGenerator.microservice.name))/]" WITH PASSWORD '123456789!aA';

### Grant privileges to the user on the database
GRANT ALL PRIVILEGES ON DATABASE "[(getAppName(aGenerator,aGenerator.microservice.name))/]" TO "[(getAppName(aGenerator,aGenerator.microservice.name))/]";


[/file]


[if (aGenerator.microservice.front <> null)]






[file (getFrontName(aGenerator,aGenerator.microservice.front.name).concat('/'.concat('src/app/components/header/header.component.ts')), false)]
import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';

[if aGenerator.microservice.front.security = SecurityType::SELF_JWT]
import { EventMessage } from 'src/app/shared/messages/event.message';
import { User } from 'src/app/model/user';
import { LocalStorageService } from 'src/app/shared/local-storage.service';
[/if]

[if aGenerator.microservice.front.security = SecurityType::MSAL]
import { MsalService } from '@azure/msal-angular';
import { EventEmitter } from '@angular/core';
import { GraphService } from 'src/app/services/graph.service';
import { LocalStorageService } from 'src/app/services/local-storage.service';
import { FormBuilder, FormGroup } from '@angular/forms';
import { EventMessage } from 'src/app/shared/messages/event.message';
[/if]
@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['['/]'./header.component.scss'[']'/]
})
export class HeaderComponent implements OnInit {


[if aGenerator.microservice.front.security = SecurityType::MSAL]
  public name: string = undefined;
  private currentUser : string;
  profileForm: FormGroup;

  //public user: Observable<any>;
  public user: any;
  public update = new EventEmitter<any>();

  constructor(private msalService: MsalService,
    private localStorageService: LocalStorageService,
    private eventMessage: EventMessage,
    private graphService: GraphService, public form: FormBuilder) {





  }

  ngOnInit(): void {


    this.graphService.me().subscribe(r => {
      this.name = r.displayName
      this.user = r;
      this.localStorageService.setItem('mail', r.mail);

    });
  }


  onOk(result) {

    if (result) {
      this.msalService.logout();
    } else {
      this.name = this.currentUser;
    }


  }
[/if]

[if aGenerator.microservice.front.security <> SecurityType::MSAL]
  ngOnInit(): void {


  }

[/if]

  @ViewChild('mobMenu') mobMenu: ElementRef;

  toggleMenu() {

    //this.mobMenu.nativeElement.classList
    if (this.mobMenu.nativeElement.className === 'md:hidden') {
      this.mobMenu.nativeElement.className = 'hidden'
    } else {
      this.mobMenu.nativeElement.className = 'md:hidden'
    }
  }

}
[/file]






[file (getFrontName(aGenerator,aGenerator.microservice.front.name).concat('/'.concat('src/app/app-routing.module.ts')), false)]
import { NgModule } from '@angular/core';
import { CommonModule, } from '@angular/common';
import { BrowserModule  } from '@angular/platform-browser';
import { Routes, RouterModule } from '@angular/router';

import { HomeComponent } from './modules/home/home.component';
import { SectionsComponent } from './modules/sections/sections.component';

[if aGenerator.microservice.front.security = SecurityType::MSAL]
import { LoginComponent } from './modules/login/login.component';
import { MsalGuard } from '@azure/msal-angular';
[/if]
[if aGenerator.microservice.front.security = SecurityType::SELF_JWT]
import { AuthGuard } from './core/guard/auth-guard';
[/if]

const routes: Routes =['['/]
    { path: 'sections',          component: SectionsComponent [if aGenerator.microservice.front.security = SecurityType::SELF_JWT] , canActivate: ['['/]AuthGuard[']'/] [/if]   },  
    { path: '',          component: HomeComponent    },  
[if aGenerator.microservice.front.security = SecurityType::SELF_JWT or aGenerator.microservice.front.security = SecurityType::MSAL] 
 { path: 'login',          component: LoginComponent },   
  { path: '', redirectTo: '/login', pathMatch: 'full'},
  { path: '**', redirectTo: '/login', pathMatch: 'full'}
[/if]
[']'/];

@NgModule({
  imports: ['['/]
    CommonModule,
    BrowserModule,
    RouterModule.forRoot(routes,{
      useHash: true
    })
  [']'/],
  exports: ['['/][']'/],
})
export class AppRoutingModule { }


[/file]



  [for (entity : Entity | aGenerator.microservice.entities)]
	[file (getFrontName(aGenerator,aGenerator.microservice.front.name).concat('/'.concat('src/app/sections/').concat(getSimpleAppName(aGenerator,aGenerator.microservice.name)).concat('/').concat(entity.name.toLowerCase()).concat('.component.html')), false)]

<!-- section -->
<section>

<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 flex flex-col my-2">
<form ['['/]formGroup[']'/]="form[entity.name/]" role="form">
[entity.name/]
  <div class="-mx-3 md:flex mb-6">

		[for (entityAtt : EntityAttribute | entity.attributes)]
 			
 	<div class="md:w-1/2 px-3 mb-6 md:mb-0">
      <label class="block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2" for="grid-[entity.name/]-[entityAtt.name/]">
        [entityAtt.name/]
      </label>
      <input formControlName="[entityAtt.name/]" class="appearance-none block w-full bg-grey-lighter text-grey-darker border border-red rounded py-3 px-4 mb-3" id="grid-[entity.name/]-[entityAtt.name/]" type="text" placeholder="[entityAtt.name/]">
      <p class="text-red text-xs italic">Please fill out this field.</p>
    </div>

		[/for]
   
  </div>
  <div class="mt-5 sm:mt-8 sm:flex sm:justify-center lg:justify-start">
		[for (service : Service | aGenerator.microservice.services)]
			[for (path : ServicePath | aGenerator.microservice.services.paths)]
    <div class="rounded-md shadow">
      <a (click)="[getCapitalNameNonFirst(service.name)/][entity.name/][getCapitalNameNonFirst(path.name)/]()" class="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 md:py-4 md:text-lg md:px-10">
       	 [getCapitalNameNonFirst(path.name)/]
      </a>
    </div>
			[/for]
		[/for]
		[if (aGenerator.microservice.entities <> null and aGenerator.microservice.database <> null)]
 <div class="rounded-md shadow">
      <a (click)="get[getCapitalName(entity.name).toLowerCase()/]()" class="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 md:py-4 md:text-lg md:px-10">
       	 get[getCapitalName(entity.name)/]
      </a>
    </div>

 <div class="rounded-md shadow">
      <a (click)="post[getCapitalName(entity.name).toLowerCase()/]()" class="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 md:py-4 md:text-lg md:px-10">
       	 post[getCapitalName(entity.name)/]
      </a>
    </div>
		[/if ]

  </div>
</form>

<div class="flex flex-col">
  <div class="overflow-x-auto sm:-mx-6 lg:-mx-8">
    <div class="py-2 inline-block min-w-full sm:px-6 lg:px-8">
      <div class="overflow-hidden">
        <table class="min-w-full">
          <thead class="border-b">
            <tr>
	[for (entityAtt : EntityAttribute | entity.attributes)]
			  <th scope="col" class="text-sm font-medium text-gray-900 px-6 py-4 text-left">
                 [entityAtt.name/]
              </th>
	[/for]
             
            </tr>
          </thead>
          <tbody>
			<tr *ngFor="let item of result" class="border-b">
	[for (entityAtt : EntityAttribute | entity.attributes)]
 			 <td class="text-sm text-gray-900 font-light px-6 py-4 whitespace-nowrap">
                {{item.[entityAtt.name/]}}
              </td>
	[/for]
      		</tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

</div>
</section>
	[/file]
[/for]


[file (getFrontName(aGenerator,aGenerator.microservice.front.name).concat('/'.concat('package.json')), false)]
 
{
  "name": "[getFrontName(aGenerator,aGenerator.microservice.front.name)/]",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": { 
[if aGenerator.microservice.front.security <> SecurityType::MSAL]
  "@angular/animations": "~11.2.14",
    "@angular/common": "~11.2.14",
    "@angular/compiler": "~11.2.14",
    "@angular/core": "~11.2.14",
    "@angular/forms": "~11.2.14",
    "@angular/platform-browser": "~11.2.14",
    "@angular/platform-browser-dynamic": "~11.2.14",
    "@angular/router": "~11.2.14",
    "@auth0/angular-jwt": "^5.0.2",
    "angularx-social-login": "^3.5.4",
    "jw-bootstrap-switch-ng2": "2.0.5",
	"jwt-decode": "^3.1.2",
    "moment": "^2.29.1",
    "rxjs": "~6.6.0",
    "tslib": "^2.0.0",
    "zone.js": "~0.11.3",
[/if]
[if aGenerator.microservice.front.security = SecurityType::MSAL]
    "@angular/animations": "~11.2.14",
    "@angular/common": "~11.2.14",
    "@angular/compiler": "~11.2.14",
    "@angular/core": "~11.2.14",
    "@angular/forms": "~11.2.14",
    "@angular/platform-browser": "~11.2.14",
    "@angular/platform-browser-dynamic": "~11.2.14",
    "@angular/router": "~11.2.14",
    "@auth0/angular-jwt": "^5.0.2",
	"@azure/msal-angular": "^2.0.0",
    "@azure/msal-browser": "^2.14.2",
    "angularx-social-login": "^3.5.4",
    "jw-bootstrap-switch-ng2": "2.0.5",
	"jwt-decode": "^3.1.2",
    "moment": "^2.29.1",
    "rxjs": "~6.6.0",
    "tslib": "^2.0.0",
    "zone.js": "~0.11.3",

[/if]
[if aGenerator.microservice.front.security = SecurityType::SELF_JWT]
	"jwt-decode": "^3.1.2",
[/if]
    "ngx-pagination": "^5.0.0",
    "sweetalert2": "^9.17.2"
  },
  "devDependencies": {
[if aGenerator.microservice.front.security = SecurityType::MSAL]
       "@angular-devkit/build-angular": "~0.1102.13",
    "@angular/cli": "~11.2.14",
    "@angular/compiler-cli": "~11.2.14",
    "@types/jasmine": "~3.6.0",
    "@types/node": "^12.11.1",
    "codelyzer": "^6.0.0",
    "jasmine-core": "~3.6.0",
    "jasmine-spec-reporter": "~5.0.0",
    "karma": "~6.1.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage": "~2.0.3",
    "karma-jasmine": "~4.0.0",
    "karma-jasmine-html-reporter": "~1.5.0",
    "protractor": "~7.0.0",
    "tailwindcss": "^2.2.15",
    "ts-node": "~8.3.0",
    "tslint": "~6.1.0",
    "typescript": "~4.1.5"
[/if]
[if aGenerator.microservice.front.security <> SecurityType::MSAL]
    "@angular-devkit/build-angular": "~0.1102.13",
    "@angular/cli": "~11.2.14",
    "@angular/compiler-cli": "~11.2.14",
    "@types/jasmine": "~3.6.0",
    "@types/node": "^12.11.1",
    "codelyzer": "^6.0.0",
    "jasmine-core": "~3.6.0",
    "jasmine-spec-reporter": "~5.0.0",
    "karma": "~6.1.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage": "~2.0.3",
    "karma-jasmine": "~4.0.0",
    "karma-jasmine-html-reporter": "~1.5.0",
    "protractor": "~7.0.0",
    "tailwindcss": "^2.2.15",
    "ts-node": "~8.3.0",
    "tslint": "~6.1.0",
    "typescript": "~4.1.5"
[/if]
  }
}
[/file]



[file (getFrontName(aGenerator,aGenerator.microservice.front.name).concat('/Dockerfile'), false)]
FROM nginx:alpine

COPY nginx.conf /etc/nginx/nginx.conf

WORKDIR /usr/share/nginx/html
COPY dist /usr/share/nginx/html/

RUN echo $(ls -1 /usr/share/nginx/html/)      

[if aGenerator.microservice.front.security <> SecurityType::MSAL]
RUN echo "mainFileName=\"\$(ls /usr/share/nginx/html/main*.js)\" && \
          envsubst '\$API_URL,\$VERSION ' < \${mainFileName} > main.tmp && \
          mv main.tmp  \${mainFileName} && \ 
          nginx -g 'daemon off;'" > run.sh   
[/if]
[if aGenerator.microservice.front.security = SecurityType::MSAL]
RUN echo "mainFileName=\"\$(ls /usr/share/nginx/html/main-es5*.js)\" && \
          envsubst '\$API_URL,\$VERSION,\$CLIENT_ID,\$AUTHORITY_TENANT,\$REDIRECT_URI,\$GRAPH_ENDPOINT,\$AD_ADMIN_ROLE,\$LOGOUT_URI ' < \${mainFileName} > main.tmp && \
          mv main.tmp  \${mainFileName} && \
          mainFileName2=\"\$(ls /usr/share/nginx/html/main-es2015*.js)\" && \
          envsubst '\$API_URL,\$VERSION,\$CLIENT_ID,\$AUTHORITY_TENANT,\$REDIRECT_URI,\$GRAPH_ENDPOINT,\$AD_ADMIN_ROLE,\$LOGOUT_URI ' < \${mainFileName2} > main2.tmp && \
          mv main2.tmp  \${mainFileName2} && \
          nginx -g 'daemon off;'" > run.sh
[/if]

#RUN echo "nginx -g 'daemon off;'" > run.sh
ENTRYPOINT ['['/]"sh", "run.sh"[']'/]
[/file]



[/if]

[/template]
